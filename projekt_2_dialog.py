# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Projekt2Dialog
                                 A QGIS plugin
 Projekt 2 Informatyka Geodezyjna
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-06-07
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Klaudia Hajbowicz
        email                : 01179139@pw.edu.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets, QtCore
from qgis.utils import iface
from qgis.core import QgsWkbTypes, Qgis

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'projekt_2_dialog_base.ui'))

class Projekt2Dialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(Projekt2Dialog, self).__init__(parent)
        self.setupUi(self)
        self.button_box.accepted.connect(self.wtyczka)
        self.wczytaj_punkty()

    def wczytaj_punkty(self):
        self.point_list_widget.clear()
        warstwa = iface.activeLayer()

        if not warstwa:
            iface.messageBar().pushMessage("Error", "Nie ma aktywnej warstwy", level=2)
            return
        if warstwa.geometryType() != QgsWkbTypes.PointGeometry:
            iface.messageBar().pushMessage("Error", "Aktywna warstwa nie jest warstwą punktową", level=2)
            return
        for feature in warstwa.getFeatures():
            item = QtWidgets.QListWidgetItem(f"Numer punktu: {feature.attribute('nr_punktu')}")
            item.setData(QtCore.Qt.UserRole, feature)
            self.point_list_widget.addItem(item)
    
    def wybrane_punkty(self):
        selected_items = self.point_list_widget.selectedItems()

        return [item.data(QtCore.Qt.UserRole) for item in selected_items]
    
    def oblicz_wys(self, punkty):
        h = round((abs(punkty[0].attribute('wysokosc') - punkty[1].attribute('wysokosc'))), 2)

        iface.messageBar().pushMessage("Wynik", f"Różnica wysokości między punktami o numerach {punkty[0].attribute('nr_punktu')} i {punkty[1].attribute('nr_punktu')} wynosi: {h} [m]", level=Qgis.Success)
    
    def oblicz_pole(self, punkty):
        xy = [(p.geometry().asPoint().x(), p.geometry().asPoint().y()) for p in punkty]
        pole = self.metoda_gaussa(xy)

        jednostka = self.combo_box.currentText()
        if jednostka == "a":
            pole = round((pole/100), 2)
        elif jednostka == "ha":
            pole = round((pole/10000), 2)
        else:
            pole = round(pole, 2)
        
        id_punkty = ", ".join(str(p.attribute('nr_punktu')) for p in punkty)

        iface.messageBar().pushMessage("Wynik", f"Pole powierzchni figury o wierzchołkach w punktach o numerach {id_punkty} wynosi: {pole} [{jednostka}]", level=Qgis.Success)
    
    def metoda_gaussa(self, xy):
        n = len(xy)
        pole = 0.0
        for i in range(n):
            x1, y1 = xy[i]
            x2, y2 = xy[(i + 1) % n]
            pole += x1 * y2 - y1 * x2
        return abs(pole) / 2.0

    def wtyczka(self):
        punkty = self.wybrane_punkty()
        if len(punkty) == 2:
            self.oblicz_wys(punkty)
        elif len(punkty) >= 3:
            self.oblicz_pole(punkty)
        else:
            iface.messageBar().pushMessage("Error", "Zbyt mała liczba zaznaczonych punktów", level=2)
